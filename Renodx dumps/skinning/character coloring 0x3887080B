disabling turns character black
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   int g_nScaleTexCoordUByModelScaleAxis;// Offset:    0 Size:     4 [unused]
//   int g_nScaleTexCoordVByModelScaleAxis;// Offset:    4 Size:     4 [unused]
//   bool g_bTexCoordScaleByModel;      // Offset:    8 Size:     4
//   int g_nScaleTexCoordUByModelScaleOrigin;// Offset:   12 Size:     4 [unused]
//   int g_nScaleTexCoordVByModelScaleOrigin;// Offset:   16 Size:     4 [unused]
//   float4 g_vTexCoordScaleByModelU;   // Offset:   32 Size:    16
//   float4 g_vTexCoordScaleByModelV;   // Offset:   48 Size:    16
//   float2 g_vTexCoordScaleByModelOrigin;// Offset:   64 Size:     8
//   int g_nScaleTexCoord2UByModelScaleAxis;// Offset:   72 Size:     4 [unused]
//   int g_nScaleTexCoord2VByModelScaleAxis;// Offset:   76 Size:     4 [unused]
//   int g_nScaleTexCoord2UByModelScaleOrigin;// Offset:   80 Size:     4 [unused]
//   int g_nScaleTexCoord2VByModelScaleOrigin;// Offset:   84 Size:     4 [unused]
//   bool g_bTexCoord2ScaleByModel;     // Offset:   88 Size:     4
//   float4 g_vTexCoord2ScaleByModelU;  // Offset:   96 Size:    16
//   float4 g_vTexCoord2ScaleByModelV;  // Offset:  112 Size:    16
//   float2 g_vTexCoord2ScaleByModelOrigin;// Offset:  128 Size:     8
//   float3 g_vJitterFrequencies1;      // Offset:  144 Size:    12 [unused]
//   float3 g_vJitterAmplitudes1;       // Offset:  160 Size:    12 [unused]
//   float g_flJitterSpeed1;            // Offset:  172 Size:     4 [unused]
//
// }
//
// cbuffer PerViewConstantBuffer_t
// {
//
//   float4x4 g_matWorldToProjection;   // Offset:    0 Size:    64
//   float4x4 g_matProjectionToWorld;   // Offset:   64 Size:    64 [unused]
//   float4x4 g_matWorldToView;         // Offset:  128 Size:    64 [unused]
//   float4x4 g_matViewToProjection;    // Offset:  192 Size:    64 [unused]
//   float4 g_vInvProjRow3;             // Offset:  256 Size:    16 [unused]
//   float4 g_vClipPlane0;              // Offset:  272 Size:    16
//   float g_flToneMapScalarLinear;     // Offset:  288 Size:     4 [unused]
//   float g_flInvToneMapScalarLinear;  // Offset:  292 Size:     4 [unused]
//   float g_fInvViewportZRange;        // Offset:  296 Size:     4 [unused]
//   float g_fMinViewportZScaled;       // Offset:  300 Size:     4 [unused]
//   float3 g_vCameraPositionWs;        // Offset:  304 Size:    12
//   float g_flViewportMinZ;            // Offset:  316 Size:     4 [unused]
//   float3 g_vCameraDirWs;             // Offset:  320 Size:    12 [unused]
//   float g_flViewportMaxZ;            // Offset:  332 Size:     4 [unused]
//   float3 g_vCameraUpDirWs;           // Offset:  336 Size:    12 [unused]
//   float g_flTime;                    // Offset:  348 Size:     4 [unused]
//   float3 g_vDepthPsToVsConversion;   // Offset:  352 Size:    12 [unused]
//   float g_flNearPlane;               // Offset:  364 Size:     4 [unused]
//   float g_flFarPlane;                // Offset:  368 Size:     4 [unused]
//   float g_flLightBinnerFarPlane;     // Offset:  372 Size:     4 [unused]
//   float2 g_vInvViewportSize;         // Offset:  376 Size:     8 [unused]
//   float2 g_vViewportToGBufferRatio;  // Offset:  384 Size:     8 [unused]
//   float2 g_vMorphTextureAtlasSize;   // Offset:  392 Size:     8 [unused]
//   float4 g_vInvGBufferSize;          // Offset:  400 Size:    16 [unused]
//   float2 g_vViewportOffset;          // Offset:  416 Size:     8 [unused]
//   float2 g_vViewportSize;            // Offset:  424 Size:     8 [unused]
//   float2 g_vRenderTargetSize;        // Offset:  432 Size:     8 [unused]
//   float g_flFogBlendToBackground;    // Offset:  440 Size:     4 [unused]
//   float g_flHenyeyGreensteinCoeff;   // Offset:  444 Size:     4 [unused]
//   float3 g_vFogColor;                // Offset:  448 Size:    12 [unused]
//   float g_flNegFogStartOverFogRange; // Offset:  460 Size:     4 [unused]
//   float g_flInvFogRange;             // Offset:  464 Size:     4 [unused]
//   float g_flFogMaxDensity;           // Offset:  468 Size:     4 [unused]
//   float g_flFogExponent;             // Offset:  472 Size:     4 [unused]
//   float g_flMod2xIdentity;           // Offset:  476 Size:     4 [unused]
//   int g_nMSAASampleCount;            // Offset:  480 Size:     4 [unused]
//   float g_flInvMSAASampleCount;      // Offset:  484 Size:     4 [unused]
//   uint g_tCompositeMorphAtlasTextureIndex;// Offset:  488 Size:     4 [unused]
//   uint __pad0;                       // Offset:  492 Size:     4 [unused]
//   float4 g_vFrameBufferCopyInvSizeAndUvScale;// Offset:  496 Size:    16 [unused]
//   float4 g_vCameraAngles;            // Offset:  512 Size:    16 [unused]
//   float4 g_vWorldToCameraOffset;     // Offset:  528 Size:    16
//   float4 g_vPrevWorldToCameraOffset; // Offset:  544 Size:    16 [unused]
//   float4x4 g_matPrevWorldToProjection;// Offset:  560 Size:    64 [unused]
//
// }
//
// Resource bind info for g_transformBuffer
// {
//
//   struct TransformData_t
//   {
//       
//       row_major float3x4 mTransform; // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for g_instanceBuffer
// {
//
//   struct PerInstancePackedShaderData_t
//   {
//       
//       uint m_Data[8];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_transformBuffer                 texture  struct         r/o             t0      1 
// g_instanceBuffer                  texture  struct         r/o             t1      1 
// g_animatedVertexCache             texture    byte         r/o             t2      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerViewConstantBuffer_t           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   x           2     NONE    uint       
// SV_VertexID              0   x           3   VERTID    uint   x   
// BLENDINDICES             0   xyzw        4     NONE    uint   x   
// TEXCOORD                13   x           5     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          0   x           6  CLIPDST   float   x   
//
      0x00000000: vs_5_0
      0x00000008: dcl_globalFlags refactoringAllowed
      0x0000000C: dcl_constantbuffer CB0[9], immediateIndexed
      0x0000001C: dcl_constantbuffer CB1[34], immediateIndexed
      0x0000002C: dcl_resource_structured t0, 48
      0x0000003C: dcl_resource_structured t1, 32
      0x0000004C: dcl_resource_raw t2
      0x00000058: dcl_input v1.xy
      0x00000064: dcl_input_sgv v3.x, vertex_id
      0x00000074: dcl_input v4.x
      0x00000080: dcl_input v5.x
      0x0000008C: dcl_output o0.xyz
      0x00000098: dcl_output o1.xyzw
      0x000000A4: dcl_output o2.xyzw
      0x000000B0: dcl_output o3.xyzw
      0x000000BC: dcl_output o4.xyzw
      0x000000C8: dcl_output_siv o5.xyzw, position
      0x000000D8: dcl_output_siv o6.x, clip_distance
      0x000000E8: dcl_temps 5
   0  0x000000F0: ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r0.xy, v5.x, l(0), t1.xyxx
   1  0x0000011C: ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r0.zw, v5.x, l(16), t1.xxxy
   2  0x00000148: and r1.x, r0.x, l(255)
   3  0x00000164: ubfe r1.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r0.xxxx
   4  0x000001A0: ushr r0.x, r0.x, l(24)
   5  0x000001BC: utof r2.xyz, r1.xyzx
   6  0x000001D0: utof r0.x, r0.x
   7  0x000001E4: mul o3.w, r0.x, l(0.003922)
   8  0x00000200: mul r1.xyz, r2.xyzx, l(0.000304, 0.000304, 0.000304, 0.000000)
   9  0x00000228: mad r3.xyz, r2.xyzx, l(0.003717, 0.003717, 0.003717, 0.000000), l(0.052133, 0.052133, 0.052133, 0.000000)
  10  0x00000264: log r3.xyz, r3.xyzx
  11  0x00000278: mul r3.xyz, r3.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
  12  0x000002A0: exp r3.xyz, r3.xyzx
  13  0x000002B4: ge r2.xyz, l(10.314749, 10.314749, 10.314749, 0.000000), r2.xyzx
  14  0x000002DC: movc o3.xyz, r2.xyzx, r1.xyzx, r3.xyzx
  15  0x00000300: iadd r0.x, r0.w, v3.x
  16  0x0000031C: and r0.x, r0.x, l(0x0007ffff)
  17  0x00000338: imul null, r0.w, r0.x, l(24)
  18  0x00000358: ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyz, r0.w, t2.xyzx
  19  0x0000037C: imad r0.x, r0.x, l(24), l(12)
  20  0x000003A0: ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.xw, r0.x, t2.xxxy
  21  0x000003C4: and r2.xy, r0.xwxx, l(0x0000ffff, 1, 0, 0)
  22  0x000003EC: utof r3.x, r2.x
  23  0x00000400: ushr r0.x, r0.x, l(16)
  24  0x0000041C: utof r3.y, r0.x
  25  0x00000430: ubfe r0.xw, l(15, 0, 0, 15), l(1, 0, 0, 16), r0.wwww
  26  0x0000046C: utof r0.xw, r0.xxxw
  27  0x00000480: mad r2.xz, r3.xxyx, l(0.000031, 0.000000, 0.000031, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
  28  0x000004BC: add r2.w, -|r2.x|, l(1.000000)
  29  0x000004DC: add r3.z, -|r2.z|, r2.w
  30  0x000004FC: max r2.w, -r3.z, l(0.000000)
  31  0x0000051C: ge r4.xy, r2.xzxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  32  0x00000544: movc r4.xy, r4.xyxx, -r2.wwww, r2.wwww
  33  0x0000056C: add r3.xy, r2.xzxx, r4.xyxx
  34  0x00000588: dp3 r2.x, r3.xyzx, r3.xyzx
  35  0x000005A4: rsq r2.x, r2.x
  36  0x000005B8: mul o0.xyz, r2.xxxx, r3.xyzx
  37  0x000005D4: mad r0.xw, r0.xxxw, l(0.000061, 0.000000, 0.000000, 0.000061), l(-1.000000, 0.000000, 0.000000, -1.000000)
  38  0x00000610: add r2.x, -|r0.x|, l(1.000000)
  39  0x00000630: add r3.z, -|r0.w|, r2.x
  40  0x00000650: max r2.x, -r3.z, l(0.000000)
  41  0x00000670: ge r2.zw, r0.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
  42  0x00000698: movc r2.xz, r2.zzwz, -r2.xxxx, r2.xxxx
  43  0x000006C0: add r3.xy, r0.xwxx, r2.xzxx
  44  0x000006DC: dp3 r0.x, r3.xyzx, r3.xyzx
  45  0x000006F8: rsq r0.x, r0.x
  46  0x0000070C: mul o4.xyz, r0.xxxx, r3.xyzx
  47  0x00000728: movc o4.w, r2.y, l(1.000000), l(-1.000000)
  48  0x0000074C: add o2.xyz, r1.xyzx, -cb1[19].xyzx
  49  0x00000770: mov r1.w, l(1.000000)
  50  0x00000784: add r2.xyzw, r1.xyzw, cb1[33].xyzw
  51  0x000007A4: mul r3.xyzw, r2.yyyy, cb1[1].xyzw
  52  0x000007C4: mad r3.xyzw, cb1[0].xyzw, r2.xxxx, r3.xyzw
  53  0x000007EC: mad r3.xyzw, cb1[2].xyzw, r2.zzzz, r3.xyzw
  54  0x00000814: mad o5.xyzw, cb1[3].xyzw, r2.wwww, r3.xyzw
  55  0x0000083C: dp4 o6.x, r1.xyzw, cb1[17].xyzw
  56  0x0000085C: or r0.x, cb0[0].z, cb0[5].z
  57  0x00000880: if_nz r0.x
  58  0x0000088C:   and r0.x, r0.z, l(15)
  59  0x000008A8:   ieq r0.x, r0.x, l(1)
  60  0x000008C4:   iadd r0.z, r0.y, v4.x
  61  0x000008E0:   iadd r0.z, r0.z, l(2)
  62  0x000008FC:   movc r0.x, r0.x, r0.z, r0.y
  63  0x00000920:   ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r0.yzw, r0.x, l(0), t0.xxyz
  64  0x0000094C:   ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(16), t0.xyzx
  65  0x00000978:   ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyz, r0.x, l(32), t0.xyzx
  66  0x000009A4:   ge r3.xy, v1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  67  0x000009CC:   mov r4.x, r0.y
  68  0x000009E0:   mov r4.y, r1.x
  69  0x000009F4:   mov r4.z, r2.x
  70  0x00000A08:   dp3 r0.x, r4.xyzx, r4.xyzx
  71  0x00000A24:   sqrt r4.x, r0.x
  72  0x00000A38:   mov r0.x, r0.z
  73  0x00000A4C:   mov r0.y, r1.y
  74  0x00000A60:   mov r0.z, r2.y
  75  0x00000A74:   dp3 r0.x, r0.xyzx, r0.xyzx
  76  0x00000A90:   sqrt r4.y, r0.x
  77  0x00000AA4:   mov r2.x, r0.w
  78  0x00000AB8:   mov r2.y, r1.z
  79  0x00000ACC:   dp3 r0.x, r2.xyzx, r2.xyzx
  80  0x00000AE8:   sqrt r4.z, r0.x
  81  0x00000AFC:   mov r4.w, l(1.000000)
  82  0x00000B10:   dp4 r0.x, r4.xyzw, cb0[2].xyzw
  83  0x00000B30:   dp4 r0.y, r4.xyzw, cb0[3].xyzw
  84  0x00000B50:   add r0.zw, v1.xxxy, -cb0[4].xxxy
  85  0x00000B74:   mad r0.x, r0.z, r0.x, cb0[4].x
  86  0x00000B9C:   movc r1.x, r3.x, r0.x, v1.x
  87  0x00000BC0:   mad r0.x, r0.w, r0.y, cb0[4].y
  88  0x00000BE8:   movc r1.y, r3.y, r0.x, v1.y
  89  0x00000C0C:   movc o1.xy, cb0[0].zzzz, r1.xyxx, v1.xyxx
  90  0x00000C34:   dp4 r0.x, r4.xyzw, cb0[6].xyzw
  91  0x00000C54:   dp4 r0.y, r4.xyzw, cb0[7].xyzw
  92  0x00000C74:   add r0.zw, v1.xxxy, -cb0[8].xxxy
  93  0x00000C98:   mad r0.x, r0.z, r0.x, cb0[8].x
  94  0x00000CC0:   movc r1.z, r3.x, r0.x, v1.x
  95  0x00000CE4:   mad r0.x, r0.w, r0.y, cb0[8].y
  96  0x00000D0C:   movc r1.w, r3.y, r0.x, v1.y
  97  0x00000D30:   movc o1.zw, cb0[5].zzzz, r1.zzzw, v1.xxxy
  98  0x00000D58: else 
  99  0x00000D5C:   mov o1.xyzw, v1.xyxy
 100  0x00000D70: endif 
 101  0x00000D74: mov o2.w, l(1.000000)
 102  0x00000D88: ret 
// Approximately 103 instruction slots used
