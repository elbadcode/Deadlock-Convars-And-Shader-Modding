//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   int g_nScaleTexCoordUByModelScaleAxis;// Offset:    0 Size:     4 [unused]
//   int g_nScaleTexCoordVByModelScaleAxis;// Offset:    4 Size:     4 [unused]
//   bool g_bTexCoordScaleByModel;      // Offset:    8 Size:     4
//   int g_nScaleTexCoordUByModelScaleOrigin;// Offset:   12 Size:     4 [unused]
//   int g_nScaleTexCoordVByModelScaleOrigin;// Offset:   16 Size:     4 [unused]
//   float4 g_vTexCoordScaleByModelU;   // Offset:   32 Size:    16
//   float4 g_vTexCoordScaleByModelV;   // Offset:   48 Size:    16
//   float2 g_vTexCoordScaleByModelOrigin;// Offset:   64 Size:     8
//   int g_nScaleTexCoord2UByModelScaleAxis;// Offset:   72 Size:     4 [unused]
//   int g_nScaleTexCoord2VByModelScaleAxis;// Offset:   76 Size:     4 [unused]
//   int g_nScaleTexCoord2UByModelScaleOrigin;// Offset:   80 Size:     4 [unused]
//   int g_nScaleTexCoord2VByModelScaleOrigin;// Offset:   84 Size:     4 [unused]
//   bool g_bTexCoord2ScaleByModel;     // Offset:   88 Size:     4
//   float4 g_vTexCoord2ScaleByModelU;  // Offset:   96 Size:    16
//   float4 g_vTexCoord2ScaleByModelV;  // Offset:  112 Size:    16
//   float2 g_vTexCoord2ScaleByModelOrigin;// Offset:  128 Size:     8
//   float3 g_vJitterFrequencies1;      // Offset:  144 Size:    12 [unused]
//   float3 g_vJitterAmplitudes1;       // Offset:  160 Size:    12 [unused]
//   float g_flJitterSpeed1;            // Offset:  172 Size:     4 [unused]
//   float g_flGlitchStrength;          // Offset:  176 Size:     4 [unused]
//   int g_nGlitchQuantizeType;         // Offset:  180 Size:     4 [unused]
//   float g_flGlitchQuantizeScale;     // Offset:  184 Size:     4 [unused]
//   float g_flGlitchQuantizeStrength;  // Offset:  188 Size:     4 [unused]
//   float g_flGlitchFrameRate;         // Offset:  192 Size:     4 [unused]
//   float g_flGlitchSpeed;             // Offset:  196 Size:     4 [unused]
//   float g_flGlitchJumpStrength;      // Offset:  200 Size:     4 [unused]
//   float g_flGlitchDistortStrength;   // Offset:  204 Size:     4 [unused]
//
// }
//
// cbuffer PerViewConstantBuffer_t
// {
//
//   float4x4 g_matWorldToProjection;   // Offset:    0 Size:    64
//   float4x4 g_matProjectionToWorld;   // Offset:   64 Size:    64 [unused]
//   float4x4 g_matWorldToView;         // Offset:  128 Size:    64 [unused]
//   float4x4 g_matViewToProjection;    // Offset:  192 Size:    64 [unused]
//   float4 g_vInvProjRow3;             // Offset:  256 Size:    16 [unused]
//   float4 g_vClipPlane0;              // Offset:  272 Size:    16
//   float g_flToneMapScalarLinear;     // Offset:  288 Size:     4 [unused]
//   float g_flInvToneMapScalarLinear;  // Offset:  292 Size:     4 [unused]
//   float g_fInvViewportZRange;        // Offset:  296 Size:     4 [unused]
//   float g_fMinViewportZScaled;       // Offset:  300 Size:     4 [unused]
//   float3 g_vCameraPositionWs;        // Offset:  304 Size:    12
//   float g_flViewportMinZ;            // Offset:  316 Size:     4 [unused]
//   float3 g_vCameraDirWs;             // Offset:  320 Size:    12 [unused]
//   float g_flViewportMaxZ;            // Offset:  332 Size:     4 [unused]
//   float3 g_vCameraUpDirWs;           // Offset:  336 Size:    12 [unused]
//   float g_flTime;                    // Offset:  348 Size:     4 [unused]
//   float3 g_vDepthPsToVsConversion;   // Offset:  352 Size:    12 [unused]
//   float g_flNearPlane;               // Offset:  364 Size:     4 [unused]
//   float g_flFarPlane;                // Offset:  368 Size:     4 [unused]
//   float g_flLightBinnerFarPlane;     // Offset:  372 Size:     4 [unused]
//   float2 g_vInvViewportSize;         // Offset:  376 Size:     8 [unused]
//   float2 g_vViewportToGBufferRatio;  // Offset:  384 Size:     8 [unused]
//   float2 g_vMorphTextureAtlasSize;   // Offset:  392 Size:     8 [unused]
//   float4 g_vInvGBufferSize;          // Offset:  400 Size:    16 [unused]
//   float2 g_vViewportOffset;          // Offset:  416 Size:     8 [unused]
//   float2 g_vViewportSize;            // Offset:  424 Size:     8 [unused]
//   float2 g_vRenderTargetSize;        // Offset:  432 Size:     8 [unused]
//   float g_flFogBlendToBackground;    // Offset:  440 Size:     4 [unused]
//   float g_flHenyeyGreensteinCoeff;   // Offset:  444 Size:     4 [unused]
//   float3 g_vFogColor;                // Offset:  448 Size:    12 [unused]
//   float g_flNegFogStartOverFogRange; // Offset:  460 Size:     4 [unused]
//   float g_flInvFogRange;             // Offset:  464 Size:     4 [unused]
//   float g_flFogMaxDensity;           // Offset:  468 Size:     4 [unused]
//   float g_flFogExponent;             // Offset:  472 Size:     4 [unused]
//   float g_flMod2xIdentity;           // Offset:  476 Size:     4 [unused]
//   int g_nMSAASampleCount;            // Offset:  480 Size:     4 [unused]
//   float g_flInvMSAASampleCount;      // Offset:  484 Size:     4 [unused]
//   uint g_tCompositeMorphAtlasTextureIndex;// Offset:  488 Size:     4 [unused]
//   uint __pad0;                       // Offset:  492 Size:     4 [unused]
//   float4 g_vFrameBufferCopyInvSizeAndUvScale;// Offset:  496 Size:    16 [unused]
//   float4 g_vCameraAngles;            // Offset:  512 Size:    16 [unused]
//   float4 g_vWorldToCameraOffset;     // Offset:  528 Size:    16
//   float4 g_vPrevWorldToCameraOffset; // Offset:  544 Size:    16 [unused]
//   float4x4 g_matPrevWorldToProjection;// Offset:  560 Size:    64 [unused]
//
// }
//
// Resource bind info for g_transformBuffer
// {
//
//   struct TransformData_t
//   {
//       
//       row_major float3x4 mTransform; // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for g_instanceBuffer
// {
//
//   struct PerInstancePackedShaderData_t
//   {
//       
//       uint m_Data[8];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_transformBuffer                 texture  struct         r/o             t0      1 
// g_instanceBuffer                  texture  struct         r/o             t1      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerViewConstantBuffer_t           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   x           2     NONE    uint   x   
// BLENDINDICES             0   xyzw        3     NONE    uint   x   
// TEXCOORD                13   x           4     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          0   x           6  CLIPDST   float   x   
//
      0x00000000: vs_5_0
      0x00000008: dcl_globalFlags refactoringAllowed
      0x0000000C: dcl_constantbuffer CB0[9], immediateIndexed
      0x0000001C: dcl_constantbuffer CB1[34], immediateIndexed
      0x0000002C: dcl_resource_structured t0, 48
      0x0000003C: dcl_resource_structured t1, 32
      0x0000004C: dcl_input v0.xyz
      0x00000058: dcl_input v1.xy
      0x00000064: dcl_input v2.x
      0x00000070: dcl_input v3.x
      0x0000007C: dcl_input v4.x
      0x00000088: dcl_output o0.xyz
      0x00000094: dcl_output o1.xyzw
      0x000000A0: dcl_output o2.xyzw
      0x000000AC: dcl_output o3.xyzw
      0x000000B8: dcl_output o4.xyzw
      0x000000C4: dcl_output_siv o5.xyzw, position
      0x000000D4: dcl_output_siv o6.x, clip_distance
      0x000000E4: dcl_temps 8
   0  0x000000EC: ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r0.xy, v4.x, l(0), t1.xyxx
   1  0x00000118: ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r0.z, v4.x, l(16), t1.xxxx
   2  0x00000144: and r0.z, r0.z, l(15)
   3  0x00000160: ieq r0.z, r0.z, l(1)
   4  0x0000017C: iadd r0.w, r0.y, v3.x
   5  0x00000198: iadd r0.w, r0.w, l(2)
   6  0x000001B4: movc r0.y, r0.z, r0.w, r0.y
   7  0x000001D8: ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, l(0), t0.xyzw
   8  0x00000204: ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t0.xyzw
   9  0x00000230: ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r3.xyzw, r0.y, l(32), t0.xyzw
  10  0x0000025C: and r0.y, r0.x, l(255)
  11  0x00000278: ubfe r0.zw, l(0, 0, 8, 8), l(0, 0, 8, 16), r0.xxxx
  12  0x000002B4: ushr r0.x, r0.x, l(24)
  13  0x000002D0: utof r4.xyz, r0.yzwy
  14  0x000002E4: utof r0.x, r0.x
  15  0x000002F8: mul o3.w, r0.x, l(0.003922)
  16  0x00000314: mul r0.xyz, r4.xyzx, l(0.000304, 0.000304, 0.000304, 0.000000)
  17  0x0000033C: mad r5.xyz, r4.xyzx, l(0.003717, 0.003717, 0.003717, 0.000000), l(0.052133, 0.052133, 0.052133, 0.000000)
  18  0x00000378: log r5.xyz, r5.xyzx
  19  0x0000038C: mul r5.xyz, r5.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
  20  0x000003B4: exp r5.xyz, r5.xyzx
  21  0x000003C8: ge r4.xyz, l(10.314749, 10.314749, 10.314749, 0.000000), r4.xyzx
  22  0x000003F0: movc o3.xyz, r4.xyzx, r0.xyzx, r5.xyzx
  23  0x00000414: ushr [precise(x)] r0.x, v2.x, l(22)
  24  0x00000430: ubfe [precise(yz)] r0.yz, l(0, 10, 11, 0), l(0, 12, 1, 0), v2.xxxx
  25  0x0000046C: and [precise(w)] r0.w, v2.x, l(1)
  26  0x00000488: utof [precise(xyz)] r0.xyz, r0.xyzx
  27  0x0000049C: div [precise(xyz)] r0.xyz, r0.xyzx, l(1023.000000, 1023.000000, 2047.000000, 0.000000)
  28  0x000004C4: mul [precise(xyz)] r0.xyz, r0.xyzx, l(2.000000, 2.000000, 6.283185, 0.000000)
  29  0x000004EC: add [precise(xy)] r4.xy, r0.yxyy, l(-1.000000, -1.000000, 0.000000, 0.000000)
  30  0x00000514: add [precise(x)] r0.x, -|r4.x|, l(1.000000)
  31  0x00000534: add [precise(z)] r5.z, -|r4.y|, r0.x
  32  0x00000554: max [precise(x)] r0.x, -r5.z, l(0.000000)
  33  0x00000574: ge [precise(zw)] r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  34  0x0000059C: movc [precise(xy)] r0.xy, r4.zwzz, -r0.xxxx, r0.xxxx
  35  0x000005C4: add [precise(xy)] r5.xy, r0.xyxx, r4.xyxx
  36  0x000005E0: dp3 [precise(x)] r0.x, r5.xyzx, r5.xyzx
  37  0x000005FC: rsq [precise(x)] r0.x, r0.x
  38  0x00000610: mul [precise(xyz)] r4.xyz, r0.xxxx, r5.xyzx
  39  0x0000062C: ge [precise(x)] r0.x, r4.z, l(0.000000)
  40  0x00000648: movc [precise(xy)] r0.xy, r0.xxxx, l(1.000000,-1.000000,0,0), l(-1.000000,1.000000,0,0)
  41  0x00000684: add [precise(w)] r4.w, r4.z, r0.x
  42  0x000006A0: div [precise(w)] r4.w, l(-1.000000), r4.w
  43  0x000006BC: mul [precise(x)] r5.x, r4.y, r4.x
  44  0x000006D8: mul [precise(x)] r5.x, r4.w, r5.x
  45  0x000006F4: mul [precise(zw)] r6.zw, r4.xxxx, r0.xxxy
  46  0x00000710: mul [precise(y)] r0.y, r4.x, r6.z
  47  0x0000072C: mul [precise(y)] r0.y, r4.w, r0.y
  48  0x00000748: add [precise(x)] r6.x, r0.y, l(1.000000)
  49  0x00000764: mul [precise(y)] r6.y, r0.x, r5.x
  50  0x00000780: sincos [precise(x)] r0.x, r5.x, r0.z
  51  0x0000079C: mul [precise(xyz)] r5.xyz, r5.xxxx, r6.xywx
  52  0x000007B8: mul [precise(xyz)] r7.xyz, r4.yzxy, r6.wxyw
  53  0x000007D4: mul [precise(xyz)] r6.xyz, r4.zxyz, r6.ywxy
  54  0x000007F0: add [precise(xyz)] r6.xyz, -r6.xyzx, r7.xyzx
  55  0x00000810: mul [precise(xyz)] r0.xyz, r0.xxxx, r6.xyzx
  56  0x0000082C: add [precise(xyz)] r0.xyz, r0.xyzx, r5.xyzx
  57  0x00000848: movc [precise(w)] o4.w, r0.w, l(1.000000), l(-1.000000)
  58  0x0000086C: dp3 r5.x, r1.xyzx, r4.xyzx
  59  0x00000888: dp3 r5.y, r2.xyzx, r4.xyzx
  60  0x000008A4: dp3 r5.z, r3.xyzx, r4.xyzx
  61  0x000008C0: dp3 r0.w, r5.xyzx, r5.xyzx
  62  0x000008DC: rsq r0.w, r0.w
  63  0x000008F0: mul o0.xyz, r0.wwww, r5.xyzx
  64  0x0000090C: dp3 r4.x, r1.xyzx, r0.xyzx
  65  0x00000928: dp3 r4.y, r2.xyzx, r0.xyzx
  66  0x00000944: dp3 r4.z, r3.xyzx, r0.xyzx
  67  0x00000960: dp3 r0.x, r4.xyzx, r4.xyzx
  68  0x0000097C: rsq r0.x, r0.x
  69  0x00000990: mul o4.xyz, r0.xxxx, r4.xyzx
  70  0x000009AC: mov r0.xyz, v0.xyzx
  71  0x000009C0: mov r0.w, l(1.000000)
  72  0x000009D4: dp4 r4.x, r1.xyzw, r0.xyzw
  73  0x000009F0: dp4 r4.y, r2.xyzw, r0.xyzw
  74  0x00000A0C: dp4 r4.z, r3.xyzw, r0.xyzw
  75  0x00000A28: add o2.xyz, r4.xyzx, -cb1[19].xyzx
  76  0x00000A4C: mov r4.w, l(1.000000)
  77  0x00000A60: add r0.xyzw, r4.xyzw, cb1[33].xyzw
  78  0x00000A80: mul r5.xyzw, r0.yyyy, cb1[1].xyzw
  79  0x00000AA0: mad r5.xyzw, cb1[0].xyzw, r0.xxxx, r5.xyzw
  80  0x00000AC8: mad r5.xyzw, cb1[2].xyzw, r0.zzzz, r5.xyzw
  81  0x00000AF0: mad o5.xyzw, cb1[3].xyzw, r0.wwww, r5.xyzw
  82  0x00000B18: dp4 o6.x, r4.xyzw, cb1[17].xyzw
  83  0x00000B38: or r0.x, cb0[0].z, cb0[5].z
  84  0x00000B5C: if_nz r0.x
  85  0x00000B68:   ge r0.xy, v1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  86  0x00000B90:   mov r4.x, r1.x
  87  0x00000BA4:   mov r4.y, r2.x
  88  0x00000BB8:   mov r4.z, r3.x
  89  0x00000BCC:   dp3 r0.z, r4.xyzx, r4.xyzx
  90  0x00000BE8:   sqrt r4.x, r0.z
  91  0x00000BFC:   mov r5.x, r1.y
  92  0x00000C10:   mov r5.y, r2.y
  93  0x00000C24:   mov r5.z, r3.y
  94  0x00000C38:   dp3 r0.z, r5.xyzx, r5.xyzx
  95  0x00000C54:   sqrt r4.y, r0.z
  96  0x00000C68:   mov r3.x, r1.z
  97  0x00000C7C:   mov r3.y, r2.z
  98  0x00000C90:   dp3 r0.z, r3.xyzx, r3.xyzx
  99  0x00000CAC:   sqrt r4.z, r0.z
 100  0x00000CC0:   mov r4.w, l(1.000000)
 101  0x00000CD4:   dp4 r0.z, r4.xyzw, cb0[2].xyzw
 102  0x00000CF4:   dp4 r0.w, r4.xyzw, cb0[3].xyzw
 103  0x00000D14:   add r1.xy, v1.xyxx, -cb0[4].xyxx
 104  0x00000D38:   mad r0.z, r1.x, r0.z, cb0[4].x
 105  0x00000D60:   movc r2.x, r0.x, r0.z, v1.x
 106  0x00000D84:   mad r0.z, r1.y, r0.w, cb0[4].y
 107  0x00000DAC:   movc r2.y, r0.y, r0.z, v1.y
 108  0x00000DD0:   movc o1.xy, cb0[0].zzzz, r2.xyxx, v1.xyxx
 109  0x00000DF8:   dp4 r0.z, r4.xyzw, cb0[6].xyzw
 110  0x00000E18:   dp4 r0.w, r4.xyzw, cb0[7].xyzw
 111  0x00000E38:   add r1.xy, v1.xyxx, -cb0[8].xyxx
 112  0x00000E5C:   mad r0.z, r1.x, r0.z, cb0[8].x
 113  0x00000E84:   movc r1.z, r0.x, r0.z, v1.x
 114  0x00000EA8:   mad r0.x, r1.y, r0.w, cb0[8].y
 115  0x00000ED0:   movc r1.w, r0.y, r0.x, v1.y
 116  0x00000EF4:   movc o1.zw, cb0[5].zzzz, r1.zzzw, v1.xxxy
 117  0x00000F1C: else 
 118  0x00000F20:   mov o1.xyzw, v1.xyxy
 119  0x00000F34: endif 
 120  0x00000F38: mov o2.w, l(1.000000)
 121  0x00000F4C: ret 
// Approximately 122 instruction slots used
