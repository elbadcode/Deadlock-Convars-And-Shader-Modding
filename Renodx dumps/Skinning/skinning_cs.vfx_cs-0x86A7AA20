//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   uint g_nMorphTextureAtlasWidth;    // Offset:    0 Size:     4 [unused]
//   float4 g_vInvCMTDims;              // Offset:   16 Size:    16 [unused]
//   uint g_nVertexCount;               // Offset:   32 Size:     4
//   uint g_nPositionOffset;            // Offset:   36 Size:     4
//   uint g_nBoneIdxOffset;             // Offset:   40 Size:     4
//   uint g_nVertexSizeInBytes;         // Offset:   44 Size:     4
//   uint g_nBoneIdxBits;               // Offset:   48 Size:     4
//   uint g_nBoneWeightOffset;          // Offset:   52 Size:     4
//   uint g_nNormalOffset;              // Offset:   56 Size:     4
//   uint g_nTangentSpaceOffset;        // Offset:   60 Size:     4
//   uint g_nInstanceCount;             // Offset:   64 Size:     4
//
// }
//
// cbuffer Instances_t
// {
//
//   struct InstanceParams_t
//   {
//       
//       uint nSrcBufferOffset;         // Offset:    0
//       uint nDestBufferOffset;        // Offset:    4
//       uint nTransformBufferOffset_BlendWeightCount;// Offset:    8
//       uint nMorphOffset;             // Offset:   12
//
//   } g_instances[256];                // Offset:    0 Size:  4096
//
// }
//
// Resource bind info for g_transformBuffer
// {
//
//   struct TransformData_t
//   {
//       
//       row_major float3x4 mTransform; // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_transformBuffer                 texture  struct         r/o             t0      1 
// g_inputVB                         texture    byte         r/o             t1      1 
// g_outputVB                            UAV    byte         r/w             u0      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// Instances_t                       cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
      0x00000000: cs_5_0
      0x00000008: dcl_globalFlags refactoringAllowed
      0x0000000C: dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
      0x00000054: dcl_constantbuffer CB0[5], immediateIndexed
      0x00000064: dcl_constantbuffer CB1[256], dynamicIndexed
      0x00000074: dcl_resource_structured t0, 48
      0x00000084: dcl_resource_raw t1
      0x00000090: dcl_uav_raw u0
      0x0000009C: dcl_input vThreadID.xy
      0x000000A4: dcl_temps 16
      0x000000AC: dcl_thread_group 64, 1, 1
   0  0x000000BC: uge [precise(x)] r0.x, vThreadID.x, cb0[2].x
   1  0x000000D8: if_nz r0.x
   2  0x000000E4:   ret 
   3  0x000000E8: endif 
   4  0x000000EC: uge [precise(x)] r0.x, vThreadID.y, cb0[4].x
   5  0x00000108: if_nz r0.x
   6  0x00000114:   ret 
   7  0x00000118: endif 
   8  0x0000011C: mov [precise(x)] r0.x, vThreadID.y
   9  0x0000012C: iadd [precise(y)] r0.yz, vThreadID.xxxx, cb1[r0.x + 0].xxyx
  10  0x0000014C: imad [precise(y)] r1.xy, r0.yyyy, cb0[2].wwww, cb0[2].yzyy
  11  0x00000178: ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyz, r1.x, t1.xyzx
  12  0x0000019C: ieq [precise(xzw)] r1.xzw, cb0[3].wwxx, l(-1, 0, 16, 10)
  13  0x000001C8: if_nz r1.x
  14  0x000001D4:   imad [precise(w)] r0.w, r0.y, cb0[2].w, cb0[3].z
  15  0x00000200:   ld_raw_indexable [precise(w)](raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, t1.xxxx
  16  0x00000224:   ushr [precise(x)] r1.x, r0.w, l(22)
  17  0x00000240:   ubfe [precise(xy)] r3.xy, l(10, 11, 0, 0), l(12, 1, 0, 0), r0.wwww
  18  0x0000027C:   and [precise(w)] r0.w, r0.w, l(1)
  19  0x00000298:   utof [precise(xy)] r3.xy, r3.xyxx
  20  0x000002AC:   div [precise(xy)] r3.xy, r3.xyxx, l(1023.000000, 2047.000000, 0.000000, 0.000000)
  21  0x000002D4:   mul [precise(xy)] r3.xy, r3.xyxx, l(2.000000, 6.283185, 0.000000, 0.000000)
  22  0x000002FC:   add [precise(x)] r4.x, r3.x, l(-1.000000)
  23  0x00000318:   utof [precise(x)] r1.x, r1.x
  24  0x0000032C:   div [precise(x)] r1.x, r1.x, l(1023.000000)
  25  0x00000348:   mul [precise(x)] r1.x, r1.x, l(2.000000)
  26  0x00000364:   add [precise(y)] r4.y, r1.x, l(-1.000000)
  27  0x00000380:   add [precise(x)] r1.x, -|r4.x|, l(1.000000)
  28  0x000003A0:   add [precise(z)] r5.z, -|r4.y|, r1.x
  29  0x000003C0:   max [precise(x)] r1.x, -r5.z, l(0.000000)
  30  0x000003E0:   ge [precise(xz)] r3.xz, r4.xxyx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31  0x00000408:   movc [precise(xz)] r3.xz, r3.xxzx, -r1.xxxx, r1.xxxx
  32  0x00000430:   add [precise(xy)] r5.xy, r3.xzxx, r4.xyxx
  33  0x0000044C:   dp3 [precise(x)] r1.x, r5.xyzx, r5.xyzx
  34  0x00000468:   rsq [precise(x)] r1.x, r1.x
  35  0x0000047C:   mul [precise(xzw)] r3.xzw, r1.xxxx, r5.xxyz
  36  0x00000498:   ge [precise(x)] r1.x, r3.w, l(0.000000)
  37  0x000004B4:   movc [precise(xy)] r4.xy, r1.xxxx, l(1.000000,-1.000000,0,0), l(-1.000000,1.000000,0,0)
  38  0x000004F0:   add [precise(x)] r1.x, r3.w, r4.x
  39  0x0000050C:   div [precise(x)] r1.x, l(-1.000000), r1.x
  40  0x00000528:   mul [precise(z)] r4.z, r3.z, r3.x
  41  0x00000544:   mul [precise(z)] r4.z, r1.x, r4.z
  42  0x00000560:   mul [precise(zw)] r5.zw, r3.xxxx, r4.xxxy
  43  0x0000057C:   mul [precise(y)] r4.y, r3.x, r5.z
  44  0x00000598:   mul [precise(x)] r1.x, r1.x, r4.y
  45  0x000005B4:   add [precise(x)] r5.x, r1.x, l(1.000000)
  46  0x000005D0:   mul [precise(y)] r5.y, r4.z, r4.x
  47  0x000005EC:   sincos [precise(x)] r1.x, r4.x, r3.y
  48  0x00000608:   mul [precise(xyz)] r4.xyz, r4.xxxx, r5.xywx
  49  0x00000624:   mul [precise(xyz)] r6.xyz, r3.zwxz, r5.wxyw
  50  0x00000640:   mul [precise(xyz)] r5.xyz, r3.wxzw, r5.ywxy
  51  0x0000065C:   add [precise(xyz)] r5.xyz, -r5.xyzx, r6.xyzx
  52  0x0000067C:   mul [precise(xyz)] r5.xyz, r1.xxxx, r5.xyzx
  53  0x00000698:   add [precise(xyz)] r4.xyz, r4.xyzx, r5.xyzx
  54  0x000006B4:   movc [precise(w)] r4.w, r0.w, l(1.000000), l(-1.000000)
  55  0x000006D8: else 
  56  0x000006DC:   imad [precise(xy)] r5.xy, r0.yyyy, cb0[2].wwww, cb0[3].zwzz
  57  0x00000708:   ld_raw_indexable [precise(xzw)](raw_buffer)(mixed,mixed,mixed,mixed) r3.xzw, r5.x, t1.xxyz
  58  0x0000072C:   ult [precise(w)] r0.w, cb0[3].w, l(-1)
  59  0x0000074C:   ld_raw_indexable [precise](raw_buffer)(mixed,mixed,mixed,mixed) r5.xyzw, r5.y, t1.xyzw
  60  0x00000770:   movc [precise] r4.xyzw, r0.wwww, r5.xyzw, l(0,0,1.000000,1.000000)
  61  0x000007A0: endif 
  62  0x000007A4: ushr [precise(w)] r0.w, cb1[r0.x + 0].z, l(4)
  63  0x000007C8: ult [precise(x)] r1.x, cb0[2].z, l(-1)
  64  0x000007E8: ld_raw_indexable [precise(xy)](raw_buffer)(mixed,mixed,mixed,mixed) r5.xy, r1.y, t1.xyxx
  65  0x0000080C: and [precise(xz)] r6.xz, r5.xxyx, l(0x0000ffff, 0, 0x0000ffff, 0)
  66  0x00000834: ushr [precise(yw)] r6.yw, r5.xxxy, l(0, 16, 0, 16)
  67  0x0000085C: ld_raw_indexable [precise(y)](raw_buffer)(mixed,mixed,mixed,mixed) r1.y, r1.y, t1.xxxx
  68  0x00000880: and [precise(xy)] r5.xy, r1.yyyy, l(255, 1023, 0, 0)
  69  0x000008A8: ubfe [precise] r7.xyzw, l(10, 10, 8, 8), l(10, 20, 8, 16), r1.yyyy
  70  0x000008E4: ushr [precise(w)] r5.w, r1.y, l(24)
  71  0x00000900: mov [precise(x)] r8.x, r5.y
  72  0x00000914: mov [precise(yz)] r8.yz, r7.xxyx
  73  0x00000928: mov [precise(w)] r8.w, l(-1)
  74  0x0000093C: mov [precise(yz)] r5.yz, r7.zzwz
  75  0x00000950: movc [precise] r5.xyzw, r1.wwww, r8.xyzw, r5.xyzw
  76  0x00000974: movc [precise] r5.xyzw, r1.zzzz, r6.xyzw, r5.xyzw
  77  0x00000998: movc [precise] r1.xyzw, r1.xxxx, r5.xyzw, l(-1,-1,-1,-1)
  78  0x000009C8: ult [precise(y)] r3.y, cb0[3].y, l(-1)
  79  0x000009E8: imad [precise(y)] r0.y, r0.y, cb0[2].w, cb0[3].y
  80  0x00000A14: ld_raw_indexable [precise(y)](raw_buffer)(mixed,mixed,mixed,mixed) r0.y, r0.y, t1.xxxx
  81  0x00000A38: and [precise(x)] r5.x, r0.y, l(255)
  82  0x00000A54: utof [precise(x)] r5.x, r5.x
  83  0x00000A68: ubfe [precise(xy)] r6.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r0.yyyy
  84  0x00000AA4: utof [precise(yz)] r5.yz, r6.xxyx
  85  0x00000AB8: ushr [precise(y)] r0.y, r0.y, l(24)
  86  0x00000AD4: utof [precise(w)] r5.w, r0.y
  87  0x00000AE8: mul [precise] r5.xyzw, r5.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
  88  0x00000B10: movc [precise(x)] r5.x, r3.y, r5.x, l(1.000000)
  89  0x00000B34: ult [precise(y)] r0.y, r1.x, l(-1)
  90  0x00000B50: if_nz r0.y
  91  0x00000B5C:   and [precise(x)] r0.x, l(15), cb1[r0.x + 0].z
  92  0x00000B80:   iadd [precise(y)] r0.y, r0.w, l(2)
  93  0x00000B9C:   iadd [precise(y)] r3.y, r1.x, r0.y
  94  0x00000BB8:   ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r6.xyzw, r3.y, l(0), t0.xyzw
  95  0x00000BE4:   ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r7.xyzw, r3.y, l(16), t0.xyzw
  96  0x00000C10:   ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r8.xyzw, r3.y, l(32), t0.xyzw
  97  0x00000C3C:   mul [precise(xyz)] r6.xyzw, r5.xxxx, r6.xyzw
  98  0x00000C58:   mul [precise(xyz)] r7.xyzw, r5.xxxx, r7.xyzw
  99  0x00000C74:   mul [precise(xyz)] r8.xyzw, r5.xxxx, r8.xyzw
 100  0x00000C90:   mov [precise(xyz)] r9.xyzw, r6.xyzw
 101  0x00000CA4:   mov [precise(xyz)] r10.xyzw, r7.xyzw
 102  0x00000CB8:   mov [precise(xyz)] r11.xyzw, r8.xyzw
 103  0x00000CCC:   mov [precise(x)] r12.x, l(1)
 104  0x00000CE0:   loop 
 105  0x00000CE4:     uge [precise(y)] r3.y, r12.x, r0.x
 106  0x00000D00:     breakc_nz r3.y
 107  0x00000D0C:     dp4 [precise(y)] r3.y, r5.xyzw, icb[r12.x + 0].xyzw
 108  0x00000D2C:     ineg [precise(z)] r12.z, r12.x
 109  0x00000D40:     ult [precise(xyz)] r13.xyz, r12.xxxx, l(1, 2, 3, 0)
 110  0x00000D68:     and [precise(y)] r14.y, r12.z, r13.y
 111  0x00000D84:     iadd [precise(xy)] r12.xy, r12.xxxx, l(1, -3, 0, 0)
 112  0x00000DAC:     movc [precise(z)] r14.z, r13.y, l(0), r12.y
 113  0x00000DD0:     ieq [precise(w)] r14.w, r13.z, l(0)
 114  0x00000DEC:     mov [precise(x)] r14.x, r13.x
 115  0x00000E00:     and [precise] r13.xyzw, r1.xyzw, r14.xyzw
 116  0x00000E1C:     or [precise(yz)] r12.yz, r13.yywy, r13.xxzx
 117  0x00000E38:     or [precise(y)] r12.y, r12.z, r12.y
 118  0x00000E54:     iadd [precise(y)] r12.y, r0.y, r12.y
 119  0x00000E70:     ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.xyzw, r12.y, l(0), t0.xyzw
 120  0x00000E9C:     ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.xyzw, r12.y, l(16), t0.xyzw
 121  0x00000EC8:     ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r15.xyzw, r12.y, l(32), t0.xyzw
 122  0x00000EF4:     mul [precise(xyz)] r13.xyzw, r3.yyyy, r13.xyzw
 123  0x00000F10:     mul [precise(xyz)] r14.xyzw, r3.yyyy, r14.xyzw
 124  0x00000F2C:     mul [precise(xyz)] r15.xyzw, r3.yyyy, r15.xyzw
 125  0x00000F48:     add [precise(xyz)] r9.xyzw, r9.xyzw, r13.xyzw
 126  0x00000F64:     add [precise(xyz)] r10.xyzw, r10.xyzw, r14.xyzw
 127  0x00000F80:     add [precise(xyz)] r11.xyzw, r11.xyzw, r15.xyzw
 128  0x00000F9C:   endloop 
 129  0x00000FA0: else 
 130  0x00000FA4:   ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyzw, r0.w, l(0), t0.xyzw
 131  0x00000FD0:   ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r6.xyzw, r0.w, l(16), t0.xyzw
 132  0x00000FFC:   ld_structured_indexable [precise(xyz)](structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r7.xyzw, r0.w, l(32), t0.xyzw
 133  0x00001028:   mul [precise(xyz)] r9.xyzw, r1.xyzw, r5.xxxx
 134  0x00001044:   mul [precise(xyz)] r10.xyzw, r5.xxxx, r6.xyzw
 135  0x00001060:   mul [precise(xyz)] r11.xyzw, r5.xxxx, r7.xyzw
 136  0x0000107C: endif 
 137  0x00001080: mov r2.w, l(1.000000)
 138  0x00001094: dp4 r1.x, r9.xyzw, r2.xyzw
 139  0x000010B0: dp4 r1.y, r10.xyzw, r2.xyzw
 140  0x000010CC: dp4 r1.z, r11.xyzw, r2.xyzw
 141  0x000010E8: dp3 [precise(y)] r2.y, r9.xyzx, r3.xzwx
 142  0x00001104: dp3 [precise(z)] r2.z, r10.xyzx, r3.xzwx
 143  0x00001120: dp3 [precise(x)] r2.x, r11.xyzx, r3.xzwx
 144  0x0000113C: dp3 [precise(x)] r0.x, r2.yzxy, r2.yzxy
 145  0x00001158: rsq [precise(x)] r0.x, r0.x
 146  0x0000116C: mul [precise(xyw)] r0.xyw, r0.xxxx, r2.xyxz
 147  0x00001188: dp3 [precise(y)] r2.y, r9.xyzx, r4.xyzx
 148  0x000011A4: dp3 [precise(z)] r2.z, r10.xyzx, r4.xyzx
 149  0x000011C0: dp3 [precise(x)] r2.x, r11.xyzx, r4.xyzx
 150  0x000011DC: add [precise(w)] r1.w, |r0.w|, |r0.y|
 151  0x00001200: add [precise(w)] r1.w, |r0.x|, r1.w
 152  0x00001220: div [precise(xyw)] r0.xyw, r0.xyxw, r1.wwww
 153  0x0000123C: add [precise(xy)] r3.xy, -|r0.wyww|, l(1.000000, 1.000000, 0.000000, 0.000000)
 154  0x00001268: ge [precise(xyz)] r4.xyz, r0.xywx, l(0.000000, 0.000000, 0.000000, 0.000000)
 155  0x00001290: movc [precise(zw)] r3.zw, r4.yyyz, l(0,0,1.000000,1.000000), l(0,0,-1.000000,-1.000000)
 156  0x000012CC: mul [precise(xy)] r3.xy, r3.zwzz, r3.xyxx
 157  0x000012E8: movc [precise(xy)] r0.xy, r4.xxxx, r0.ywyy, r3.xyxx
 158  0x0000130C: add [precise(w)] r0.w, |r2.z|, |r2.y|
 159  0x00001330: add [precise(w)] r0.w, |r2.x|, r0.w
 160  0x00001350: div [precise(xyz)] r2.xyz, r2.xyzx, r0.wwww
 161  0x0000136C: add [precise(xy)] r3.xy, -|r2.zyzz|, l(1.000000, 1.000000, 0.000000, 0.000000)
 162  0x00001398: ge [precise(xyz)] r4.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
 163  0x000013C0: movc [precise(xw)] r2.xw, r4.yyyz, l(1.000000,0,0,1.000000), l(-1.000000,0,0,-1.000000)
 164  0x000013FC: mul [precise(xw)] r2.xw, r2.xxxw, r3.xxxy
 165  0x00001418: movc [precise(xy)] r2.xy, r4.xxxx, r2.yzyy, r2.xwxx
 166  0x0000143C: mad_sat r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
 167  0x00001478: mad r0.xy, r0.xyxx, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
 168  0x000014B4: ftou r0.xy, r0.xyxx
 169  0x000014C8: imad r3.x, r0.y, l(0x00010000), r0.x
 170  0x000014EC: lt [precise(x)] r0.x, r4.w, l(0.000000)
 171  0x00001508: movc [precise(x)] r0.x, r0.x, l(0), l(1)
 172  0x0000152C: mad_sat r0.yw, r2.xxxy, l(0.000000, 0.500000, 0.000000, 0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
 173  0x00001568: mad r0.yw, r0.yyyw, l(0.000000, 32767.000000, 0.000000, 32767.000000), l(0.000000, 0.500000, 0.000000, 0.500000)
 174  0x000015A4: ftou r0.yw, r0.yyyw
 175  0x000015B8: imad r0.x, r0.y, l(2), r0.x
 176  0x000015DC: imad r3.y, r0.w, l(0x00010000), r0.x
 177  0x00001600: imul null, r0.x, r0.z, l(24)
 178  0x00001620: store_raw u0.xyz, r0.x, r1.xyzx
 179  0x0000163C: imad r0.y, l(24), r0.z, l(12)
 180  0x00001660: mov r3.z, l(0)
 181  0x00001674: store_raw u0.xyz, r0.y, r3.xyzx
 182  0x00001690: ret 
// Approximately 183 instruction slots used
