//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer FarField_t
// {
//
//   float3 g_vFarFieldBoundsMin0P;     // Offset:    0 Size:    12
//   float g_fMaxDistance;              // Offset:   12 Size:     4
//   float3 g_vFarFieldBoundsMax0P;     // Offset:   16 Size:    12 [unused]
//   float g_fVoxelSize0;               // Offset:   28 Size:     4
//   float3 g_vFarFieldBoundsMin1P;     // Offset:   32 Size:    12
//   float g_fVoxelSize1;               // Offset:   44 Size:     4
//   float3 g_vFarFieldBoundsMax1P;     // Offset:   48 Size:    12 [unused]
//
// }
//
// cbuffer FarFieldUpdate_t
// {
//
//   uint g_nInstanceCount;             // Offset:    0 Size:     4
//   uint g_nClipIndex;                 // Offset:    4 Size:     4
//
// }
//
// Resource bind info for g_models
// {
//
//   struct DistanceField_Model_t
//   {
//       
//       float3 m_vBoundsMinP;          // Offset:    0
//       uint m_nResX;                  // Offset:   12
//       float3 m_vBoundsMaxP;          // Offset:   16
//       uint m_nResY;                  // Offset:   28
//       float3 m_vAtlasOffset;         // Offset:   32
//       uint m_nResZ;                  // Offset:   44
//       float m_flMaxQuantizedDistance;// Offset:   48
//       float m_flSurfaceBias;         // Offset:   52
//       int m_nParentBoneIndex;        // Offset:   56
//       uint m_nPadBecauseHlslDoesNotSupportBitFields_SorryForThisLandmineDon;// Offset:   60
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
// Resource bind info for g_farFieldInstances
// {
//
//   struct DistanceField_Instance_t
//   {
//       
//       float4x3 m_matWorldToLocal;    // Offset:    0
//       int m_nModelIndex;             // Offset:   48
//       float m_fScale;                // Offset:   52
//       float2 m_padding;              // Offset:   56
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_sTrilinearClamp                 sampler      NA          NA             s0      1 
// g_tAtlas                          texture   float          3d             t0      1 
// g_models                          texture  struct         r/o             t1      1 
// g_farFieldInstances               texture  struct         r/o             t2      1 
// g_uFarFieldAtlas0                     UAV   float          3d             u0      1 
// g_uFarFieldAtlas1                     UAV   float          3d             u1      1 
// FarField_t                        cbuffer      NA          NA            cb0      1 
// FarFieldUpdate_t                  cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
      0x00000000: cs_5_0
      0x00000008: dcl_globalFlags refactoringAllowed
      0x0000000C: dcl_constantbuffer CB0[3], immediateIndexed
      0x0000001C: dcl_constantbuffer CB1[1], immediateIndexed
      0x0000002C: dcl_sampler s0, mode_default
      0x00000038: dcl_resource_texture3d (float,float,float,float) t0
      0x00000048: dcl_resource_structured t1, 64
      0x00000058: dcl_resource_structured t2, 64
      0x00000068: dcl_uav_typed_texture3d (float,float,float,float) u0
      0x00000078: dcl_uav_typed_texture3d (float,float,float,float) u1
      0x00000088: dcl_input vThreadIDInGroupFlattened
      0x00000090: dcl_input vThreadGroupID.xyz
      0x00000098: dcl_input vThreadIDInGroup.xyz
      0x000000A0: dcl_input vThreadID.xyz
      0x000000A8: dcl_temps 10
      0x000000B0: dcl_tgsm_structured g0, 4, 256
      0x000000C4: dcl_tgsm_raw g1, 4
      0x000000D4: dcl_thread_group 8, 8, 8
   0  0x000000E4: ieq r0.xyz, vThreadIDInGroup.xyzx, l(0, 0, 0, 0)
   1  0x00000108: and r0.x, r0.y, r0.x
   2  0x00000124: and r0.x, r0.z, r0.x
   3  0x00000140: if_nz r0.x
   4  0x0000014C:   store_raw g1.x, l(0), l(0)
   5  0x00000168: endif 
   6  0x0000016C: sync_g_t
   7  0x00000170: movc r0.x, cb1[0].y, cb0[2].w, cb0[1].w
   8  0x000001A0: mul r0.y, r0.x, l(8.000000)
   9  0x000001BC: movc r1.xyz, cb1[0].yyyy, cb0[2].xyzx, cb0[0].xyzx
  10  0x000001EC: utof r2.xyz, vThreadGroupID.xyzx
  11  0x000001FC: mad r0.yzw, r2.xxyz, r0.yyyy, r1.xxyz
  12  0x00000220: mad r1.xyz, r0.xxxx, l(8.000000, 8.000000, 8.000000, 0.000000), r0.yzwy
  13  0x00000250: add r2.xyz, r0.yzwy, -cb0[0].wwww
  14  0x00000274: add r1.xyz, r1.xyzx, cb0[0].wwww
  15  0x00000294: add r2.xyz, r1.xyzx, r2.xyzx
  16  0x000002B0: mul r3.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  17  0x000002D8: mad r1.xyz, -r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r1.xyzx
  18  0x0000030C: mov r3.w, l(1.000000)
  19  0x00000320: mov r1.w, vThreadIDInGroupFlattened.x
  20  0x00000330: loop 
  21  0x00000334:   ult r2.x, r1.w, cb1[0].x
  22  0x00000354:   ld_raw r2.y, l(0), g1.xxxx
  23  0x00000370:   ult r2.y, r2.y, l(256)
  24  0x0000038C:   and r2.x, r2.y, r2.x
  25  0x000003A8:   breakc_z r2.x
  26  0x000003B4:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r1.w, l(0), t2.xyzw
  27  0x000003E0:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.xyzw, r1.w, l(16), t2.xyzw
  28  0x0000040C:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.xyzw, r1.w, l(32), t2.xyzw
  29  0x00000438:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r6.x, r1.w, l(48), t2.xxxx
  30  0x00000464:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r6.yzw, r6.x, l(0), t1.xxyz
  31  0x00000490:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r7.xyz, r6.x, l(16), t1.xyzx
  32  0x000004BC:   dp4 r8.x, r3.xyzw, r2.xyzw
  33  0x000004D8:   dp4 r8.y, r3.xyzw, r4.xyzw
  34  0x000004F4:   dp4 r8.z, r3.xyzw, r5.xyzw
  35  0x00000510:   mul r2.xyz, r1.xxxx, r2.xyzx
  36  0x0000052C:   mul r4.xyz, r1.yyyy, r4.xyzx
  37  0x00000548:   add r2.xyz, |r2.xyzx|, |r4.xyzx|
  38  0x0000056C:   mul r4.xyz, r1.zzzz, r5.xyzx
  39  0x00000588:   add r2.xyz, r2.xyzx, |r4.xyzx|
  40  0x000005A8:   add r4.xyz, -r2.xyzx, r8.xyzx
  41  0x000005C8:   add r2.xyz, r2.xyzx, r8.xyzx
  42  0x000005E4:   lt r4.xyz, r7.xyzx, r4.xyzx
  43  0x00000600:   lt r2.xyz, r2.xyzx, r6.yzwy
  44  0x0000061C:   or r2.xyz, r2.xyzx, r4.xyzx
  45  0x00000638:   or r2.x, r2.y, r2.x
  46  0x00000654:   or r2.x, r2.z, r2.x
  47  0x00000670:   if_z r2.x
  48  0x0000067C:     imm_atomic_iadd r2.x, g1, l(0), l(1)
  49  0x000006A0:     ult r2.y, r2.x, l(256)
  50  0x000006BC:     if_nz r2.y
  51  0x000006C8:       store_structured g0.x, r2.x, l(0), r1.w
  52  0x000006EC:     endif 
  53  0x000006F0:   endif 
  54  0x000006F4:   iadd r1.w, r1.w, l(512)
  55  0x00000710: endloop 
  56  0x00000714: sync_g_t
  57  0x00000718: utof r1.xyz, vThreadIDInGroup.xyzx
  58  0x00000728: mad r0.yzw, r1.xxyz, r0.xxxx, r0.yyzw
  59  0x0000074C: mad r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000), r0.yzwy
  60  0x0000077C: ld_raw r1.x, l(0), g1.xxxx
  61  0x00000798: umin r1.x, r1.x, l(256)
  62  0x000007B4: add r1.y, cb0[0].w, cb0[0].w
  63  0x000007D8: mul r1.y, r1.y, r1.y
  64  0x000007F4: mov r0.w, l(1.000000)
  65  0x00000808: mov r1.z, cb0[0].w
  66  0x00000820: mov r1.w, l(0)
  67  0x00000834: loop 
  68  0x00000838:   uge r2.x, r1.w, r1.x
  69  0x00000854:   breakc_nz r2.x
  70  0x00000860:   ld_structured r2.x, r1.w, l(0), g0.xxxx
  71  0x00000884:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.xyzw, r2.x, l(0), t2.xyzw
  72  0x000008B0:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.xyzw, r2.x, l(16), t2.xyzw
  73  0x000008DC:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.xyzw, r2.x, l(32), t2.xyzw
  74  0x00000908:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xy, r2.x, l(48), t2.xyxx
  75  0x00000934:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r6.xyzw, r2.x, l(0), t1.xyzw
  76  0x00000960:   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r7.xyzw, r2.x, l(16), t1.xyzw
  77  0x0000098C:   add r2.z, -r6.x, r7.x
  78  0x000009AC:   utof r2.w, r6.w
  79  0x000009C0:   div r2.z, r2.z, r2.w
  80  0x000009DC:   mad r8.xyz, r2.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), r6.xyzx
  81  0x00000A0C:   mad r9.xyz, -r2.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), r7.xyzx
  82  0x00000A40:   dp4 r3.x, r0.xyzw, r3.xyzw
  83  0x00000A5C:   dp4 r3.y, r0.xyzw, r4.xyzw
  84  0x00000A78:   dp4 r3.z, r0.xyzw, r5.xyzw
  85  0x00000A94:   max r4.xyz, r8.xyzx, r3.xyzx
  86  0x00000AB0:   min r4.xyz, r9.xyzx, r4.xyzx
  87  0x00000ACC:   add r5.xyz, r3.xyzx, -r4.xyzx
  88  0x00000AEC:   dp3 r2.z, r5.xyzx, r5.xyzx
  89  0x00000B08:   lt r2.z, r2.z, r1.y
  90  0x00000B24:   if_nz r2.z
  91  0x00000B30:     ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.xyzw, r2.x, l(32), t1.xyzw
  92  0x00000B5C:     ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.x, r2.x, l(48), t1.xxxx
  93  0x00000B88:     add r7.xyz, -r6.xyzx, r7.xyzx
  94  0x00000BA8:     add r6.xyz, -r6.xyzx, r4.xyzx
  95  0x00000BC8:     div r6.xyz, r6.xyzx, r7.xyzx
  96  0x00000BE4:     mul r7.x, r2.w, r6.x
  97  0x00000C00:     utof r2.z, r7.w
  98  0x00000C14:     mul r7.y, r6.y, r2.z
  99  0x00000C30:     utof r2.z, r5.w
 100  0x00000C44:     mul r7.z, r6.z, r2.z
 101  0x00000C60:     mad r5.xyz, r7.xyzx, l(0.000977, 0.000977, 0.015625, 0.000000), r5.xyzx
 102  0x00000C90:     sample_l_indexable(texture3d)(float,float,float,float) r2.z, r5.xyzx, t0.yzxw, s0, l(0.000000)
 103  0x00000CC4:     mad r2.z, r2.z, l(2.000000), l(-1.000000)
 104  0x00000CE8:     mul r2.x, r2.x, r2.z
 105  0x00000D04:     add r3.xyz, -r3.xyzx, r4.xyzx
 106  0x00000D24:     dp3 r2.z, r3.xyzx, r3.xyzx
 107  0x00000D40:     sqrt r2.z, r2.z
 108  0x00000D54:     add r2.x, r2.z, |r2.x|
 109  0x00000D74:     mul r2.x, r2.y, r2.x
 110  0x00000D90:     min r1.z, r1.z, r2.x
 111  0x00000DAC:   endif 
 112  0x00000DB0:   iadd r1.w, r1.w, l(1)
 113  0x00000DCC: endloop 
 114  0x00000DD0: div r0.x, r1.z, cb0[0].w
 115  0x00000DF0: if_z cb1[0].y
 116  0x00000E00:   store_uav_typed u0.xyzw, vThreadID.xyzz, r0.xxxx
 117  0x00000E18: else 
 118  0x00000E1C:   store_uav_typed u1.xyzw, vThreadID.xyzz, r0.xxxx
 119  0x00000E34: endif 
 120  0x00000E38: ret 
// Approximately 121 instruction slots used
